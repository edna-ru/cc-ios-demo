// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ChatCenterUI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
@_exported import ChatCenterUI
import CryptoKit
import DeveloperToolsSupport
import Foundation
import LinkPresentation
import MobileCoreServices
import Photos
import PhotosUI
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UIKit.UIView
import UIKit.UIViewController
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc @objcMembers public class ChatTheme : ObjectiveC.NSObject {
  @objc public init(colors: ChatCenterUI.ChatColors = .init(), images: ChatCenterUI.ChatImages = .init(), typography: ChatCenterUI.ChatTypography = .init())
  @objc convenience public init(components: ChatCenterUI.ChatComponents)
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc public var colors: ChatCenterUI.ChatColors {
    get
  }
  @objc public var images: ChatCenterUI.ChatImages {
    get
  }
  @objc public var typography: ChatCenterUI.ChatTypography {
    get
  }
  @objc public var components: ChatCenterUI.ChatComponents {
    get
  }
  @objc public var flows: ChatCenterUI.ChatFlows {
    get
  }
  @objc deinit
}
@objc @objcMembers final public class THRDownloadDataRequest : ObjectiveC.NSObject {
  @objc public init(dataProvider: ChatCenterUI.CCDataProvider)
  @objc deinit
  @objc final public func downloadAndSaveFile(url: Foundation.URL, completionHandler: @escaping (Foundation.URL?, (any Swift.Error)?) -> Swift.Void, progressHandler: ((CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  @objc final public func downloadImage(url: Foundation.URL, completionHandler: @escaping (UIKit.UIImage?, (any Swift.Error)?) -> Swift.Void)
  @objc final public func downloadData(url: Foundation.URL, completionHandler: @escaping (Foundation.NSData?, Foundation.NSError?) -> Swift.Void, progressHandler: ((CoreFoundation.CGFloat) -> Swift.Void)? = nil)
  @objc final public func cancelDownload()
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ChatMessagesStyles : ChatCenterUI.ChatStyle {
  @objc public init(components: ChatCenterUI.ChatComponents, text: ChatCenterUI.TextMessageStyle, image: ChatCenterUI.ImageMessageStyle, audio: ChatCenterUI.AudioMessageStyle, file: ChatCenterUI.FileMessageStyle, quote: ChatCenterUI.QuoteStyle, showAvatar: Swift.Bool, bubbleColor: UIKit.UIColor)
  @objc public var isStroked: Swift.Bool
  @objc final public let bubbleColor: UIKit.UIColor
  @objc public var text: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var link: UIKit.UIColor
  @objc public var time: ChatCenterUI.TextChatStyle
  @objc public var quoteStyle: ChatCenterUI.QuoteStyle
  @objc public var headerStyle: ChatCenterUI.TextChatStyle
  @objc public var filledMaskImage: UIKit.UIImage
  @objc public var strokedMaskImage: UIKit.UIImage
  @objc public var filledMaskInsets: UIKit.UIEdgeInsets
  @objc public var strokedMaskInsets: UIKit.UIEdgeInsets
  @objc public var containerRightOffset: CoreFoundation.CGFloat
  @objc public var containerLeftOffset: CoreFoundation.CGFloat
  @objc public var avatarSize: CoreFoundation.CGSize
  @objc public var avatarOffset: CoreFoundation.CGFloat
  @objc public var avatarPlaceholderImage: ChatCenterUI.ChatImage {
    @objc get
    @objc set
  }
  @objc public var failed: ChatCenterUI.TextChatStyle
  @objc public var failedBubbleColor: UIKit.UIColor
  @objc public var deletedText: ChatCenterUI.TextChatStyle
  @objc public var editedStatusImage: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var showAvatar: Swift.Bool
  @objc final public let timeBackgroundColor: UIKit.UIColor
  @objc public var textMessage: ChatCenterUI.TextMessageStyle
  @objc public var imageMessage: ChatCenterUI.ImageMessageStyle
  @objc public var audioMessage: ChatCenterUI.AudioMessageStyle
  @objc public var fileMessage: ChatCenterUI.FileMessageStyle
  @objc public var pendingStatus: UIKit.UIColor
  @objc public var deliveredStatus: UIKit.UIColor
  @objc public var readStatus: UIKit.UIColor
  @objc public var pendingStatusImage: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var deliveredStatusImage: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var readStatusImage: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var mediaPendingStatusColor: UIKit.UIColor
  @objc public var mediaDeliveredStatusColor: UIKit.UIColor
  @objc public var mediaReadStatusColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ChatColors : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var main: UIKit.UIColor
  @objc public var secondary: UIKit.UIColor
  @objc public var disabled: UIKit.UIColor
  @objc public var background: UIKit.UIColor
  @objc public var backgroundWhite: UIKit.UIColor
  @objc public var link: UIKit.UIColor
  @objc public var linkLight: UIKit.UIColor
  @objc public var positive: UIKit.UIColor
  @objc public var warning: UIKit.UIColor
  @objc public var error: UIKit.UIColor
  @objc public var errorLight: UIKit.UIColor
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class NavigationBarStyle : ChatCenterUI.ChatStyle {
  @objc public var hidden: Swift.Bool
  @objc public var backButtonColor: UIKit.UIColor
  @objc public var showCloseButton: Swift.Bool
  @objc public var closeButton: ChatCenterUI.IconButtonChatStyle
  @objc public var isConfigurable: Swift.Bool
  @objc public var titleStyle: ChatCenterUI.TextChatStyle
  @objc public var subtitleVisible: Swift.Bool
  @objc public var subtitleStyle: ChatCenterUI.TextChatStyle
  @objc public var subtitleShowOrgUnit: Swift.Bool
  @objc public var navigationRightButtonStyle: ChatCenterUI.IconButtonChatStyle?
  @objc public var searchButtonStyle: ChatCenterUI.IconButtonChatStyle
  @objc public var keyboardControlVisible: Swift.Bool
  @objc public var keyboardShowButtonStyle: ChatCenterUI.IconButtonChatStyle
  @objc public var keyboardHideButtonStyle: ChatCenterUI.IconButtonChatStyle
  @objc deinit
}
@objc @objcMembers public class THRJSQFile : ObjectiveC.NSObject, Foundation.NSSecureCoding, Swift.Codable {
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public init(name: Swift.String?, url: Swift.String?)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc public var name: Swift.String?
  @objc public var url: Foundation.URL?
  @objc public var isCached: Swift.Bool {
    @objc get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum CCState : Swift.Int {
  case notConnected = 0
  case connecting
  case loadingHistory
  case ready
  case waitingForSpecialist
  case working
  case closed
  case disconnected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol CCChatStateDelegate : ObjectiveC.NSObjectProtocol {
  @objc func setTitleText(_ text: Swift.String)
  @objc func setSubtitleText(_ text: Swift.String, animated: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CCChatState : ObjectiveC.NSObject {
  @objc weak public var view: (any ChatCenterUI.CCChatStateDelegate)?
  @objc weak public var chat: ChatCenterUI.CCChatModel?
  @objc public func updateView()
  @objc public func set(_ newState: ChatCenterUI.CCState)
  @objc public func getState() -> ChatCenterUI.CCState
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class Localization : ObjectiveC.NSObject {
  @objc public class func localize(key: Swift.String, value: Swift.String) -> Swift.String
  @objc public class func localize(key: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class QuoteStyle : ChatCenterUI.ChatStyle {
  @objc public init(authorLabel: ChatCenterUI.TextChatStyle, contentLabel: ChatCenterUI.TextChatStyle, separatorColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @objc public var authorTextStyle: ChatCenterUI.TextChatStyle
  @objc public var messageTextStyle: ChatCenterUI.TextChatStyle
  @objc public var separatorColor: UIKit.UIColor
  @objc public var showFullName: Swift.Bool
  @objc deinit
}
@objc public enum SearchScope : Swift.UInt {
  case all
  case images
  case files
  case count
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SearchCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForReuse()
  @objc @_Concurrency.MainActor @preconcurrency public func configureMessage(_ message: ChatCenterUI.THRMessage, dataProvider: ChatCenterUI.CCDataProvider?, searchText: Swift.String, scope: ChatCenterUI.SearchScope, avatar: UIKit.UIImage?)
  @objc deinit
}
extension ChatCenterUI.CCChatModel {
  @objc dynamic public var voiceRecordingEnabled: Swift.Bool {
    @objc get
  }
  @objc dynamic public var linkPreviewEnabled: Swift.Bool {
    @objc get
  }
  @objc dynamic public var searchEnabled: Swift.Bool {
    @objc get
  }
  @objc dynamic public var scrollToLatest: Swift.Bool {
    @objc get
  }
  @objc dynamic public var surveyCompletionDelay: Swift.Int {
    @objc get
  }
  @objc dynamic public func loadHistoryObjc()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class MigrationServiceLocator : ObjectiveC.NSObject {
  @objc public static var shared: ChatCenterUI.MigrationServiceLocator
  @objc public static var logger: ChatCenterUI.EDNALogger? {
    @objc get
  }
  @objc public var logger: ChatCenterUI.EDNALogger?
  @objc public var style: UIKit.UIUserInterfaceStyle
  @objc public var currentTheme: ChatCenterUI.ChatTheme {
    @objc get
  }
  @objc public func open(url: Foundation.URL)
  @objc deinit
}
@objc public enum SearchState : Swift.UInt {
  case idle
  case loading
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class SearchButtonCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc @_Concurrency.MainActor @preconcurrency public func configureTextFont(_ textFont: UIKit.UIFont, textColor: UIKit.UIColor, state: ChatCenterUI.SearchState)
  @objc deinit
}
@objc extension Foundation.NSString {
  @objc dynamic public func getAttributedString(withAttributes flow: ChatCenterUI.ChatFlow, isOutgoing: Swift.Bool) -> Foundation.NSAttributedString
}
@objc public class TextButtonChatStyle : ChatCenterUI.ButtonChatStyle {
  @objc public init(title: ChatCenterUI.ChatText? = nil, color: ChatCenterUI.ChatButtonColor? = nil, borderWidth: CoreFoundation.CGFloat = 0.0)
  @objc public var title: ChatCenterUI.ChatText?
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc deinit
}
@objc @objcMembers public class THRClient : ChatCenterUI.THRParticipant {
  @objc public init(identifier: Swift.String, name: Swift.String)
  @objc public func toDictionary() -> [Swift.AnyHashable : Swift.String]?
  @objc override public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc extension Foundation.NSAttributedString {
  @objc dynamic public func detectLinkTypes() -> Foundation.NSAttributedString?
}
@objc public enum THRMessageStatus : Swift.Int {
  case sending = 0
  case failed
  case unqueued
  case sent
  case delivered
  case read
  case edited
  case deleted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum THRMessageModified : Swift.Int {
  case none = 0
  case edited
  case deleted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum THRMessageType : Swift.Int {
  case message
  case clientInfo
  case clientOffline
  case operatorJoined
  case operatorLeft
  case typing
  case messagesRead
  case survey
  case surveyQuestionAnswer
  case requestCloseThread
  case closeThread
  case reopenThread
  case operatorLookupStarted
  case clientBlocked
  case threadOpened
  case threadClosed
  case scenario
  case unreadMessageNotification
  case averageWaitTime
  case threadWillBeTransferred
  case threadInProgress
  case threadEnqueued
  case partingAfterSurvey
  case threadWillBeReassigned
  case speechMessageUpdated
  case attachmentUpdated
  case updateLocation
  case messageEdited
  case messageDeleted
  case clientPersonalDataProcessing
  case thisChatIsViewableOnly
  case schedule
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol THRMessageProtocol : ObjectiveC.NSObjectProtocol {
  @objc var date: Foundation.Date { get set }
  @objc var uuid: Swift.String { get set }
}
@objc public protocol THRMessageDelegate {
  @objc func didUpdateModified(_ modified: ChatCenterUI.THRMessageModified)
  @objc func didUpdateStatus(_ status: ChatCenterUI.THRMessageStatus)
  @objc func didUpdateStatusWithReload()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class THRMessage : ObjectiveC.NSObject, ChatCenterUI.THRMessageProtocol, Foundation.NSSecureCoding, Swift.Comparable {
  @objc public init(author: ChatCenterUI.THRParticipant? = nil, date: Foundation.Date? = nil, text: Swift.String? = nil, formattedText: Swift.String? = nil, speechText: Swift.String? = nil, status: ChatCenterUI.THRMessageStatus = .sending, media: (any ChatCenterUI.THRJSQMessageMediaData)? = nil, type: ChatCenterUI.THRMessageType)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc public var uuid: Swift.String
  @objc public var type: ChatCenterUI.THRMessageType
  @objc public var correlationId: Swift.String?
  @objc public var messageId: Swift.String?
  @objc public var author: ChatCenterUI.THRParticipant?
  @objc public var date: Foundation.Date
  @objc public var isMediaMessage: Swift.Bool
  @objc public var text: Swift.String?
  @objc public var formattedText: Swift.String?
  @objc public var speechText: Swift.String?
  @objc public var ogData: LinkPresentation.LPLinkMetadata?
  @objc public var ogUrl: Foundation.URL?
  @objc public var ogLoading: Swift.Bool
  @objc public var ogImage: UIKit.UIImage?
  @objc public var rawType: Swift.String?
  @objc public var media: (any ChatCenterUI.THRJSQMessageMediaData)?
  @objc public var status: ChatCenterUI.THRMessageStatus
  @objc public var modified: ChatCenterUI.THRMessageModified
  @objc weak public var messageDelegate: (any ChatCenterUI.THRMessageDelegate)?
  @objc public var quotedMessage: ChatCenterUI.THRMessage?
  @objc public var quickReplies: [ChatCenterUI.QuickReply]?
  @objc public var isQuickReply: Swift.Bool
  @objc public var routingParams: ChatCenterUI.THRRoutingParams?
  @objc public var isMassPushMessage: Swift.Bool
  @objc public var campaign: Swift.String?
  @objc public var chlSentAt: Swift.String?
  @objc public var loadedFromHistory: Swift.Bool
  @objc public var blockInput: Swift.Bool
  @objc public var error: (any Swift.Error)?
  @objc public var isOutgoing: Swift.Bool
  @objc public var isPersonalOffer: Swift.Bool
  @objc public var isSystemFlag: Swift.Bool
  @objc public var containsLinkMetadata: Swift.Bool {
    @objc get
  }
  @objc public var isShowStatus: Swift.Bool {
    @objc get
  }
  public static func < (lhs: ChatCenterUI.THRMessage, rhs: ChatCenterUI.THRMessage) -> Swift.Bool
  @objc public static func modified(for string: Swift.String?) -> ChatCenterUI.THRMessageModified
  @objc public static func type(for string: Swift.String?) -> ChatCenterUI.THRMessageType
  @objc public static func string(for type: ChatCenterUI.THRMessageType) -> Swift.String
  @objc public func statusImage() -> UIKit.UIImage?
  @objc public func statusColor() -> UIKit.UIColor?
  @objc public func dayHeader() -> Swift.String
  @objc public func isFileMessage() -> Swift.Bool
  @objc public func isCompletedSurveyMessage() -> Swift.Bool
  @objc public func quickRepliesMessage() -> ChatCenterUI.THRMessage?
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc public func updateFromMessage(_ message: ChatCenterUI.THRMessage)
  @objc public func setDeleted()
  @objc deinit
}
@objc public protocol LoadingChatViewControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func repeatInitChat()
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency final public class LoadingChatViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any ChatCenterUI.LoadingChatViewControllerDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency weak final public var dataProvider: ChatCenterUI.CCDataProvider?
  @objc @_Concurrency.MainActor @preconcurrency final public var error: (any Swift.Error)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func loadView()
  @objc deinit
}
@objc public enum THRParticipantSex : Swift.UInt {
  case unknown = 1
  case female = 2
  case male = 3
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @objcMembers public class THRParticipant : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public init(identifier: Swift.String, name: Swift.String? = nil, sex: ChatCenterUI.THRParticipantSex = .unknown)
  @objc required convenience public init?(coder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc final public let identifier: Swift.String
  @objc final public let name: Swift.String?
  public var sex: ChatCenterUI.THRParticipantSex?
  @objc public var avatarURL: Foundation.URL?
  @objc public var avatar: ChatCenterUI.THRJSQMessagesAvatarImage?
  @objc public var image: UIKit.UIImage?
  @objc public func getImage(_ dataRequest: ChatCenterUI.THRDownloadDataRequest, completion: @escaping (_ state: Swift.Bool) -> Swift.Void)
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  public static func colorFrom(hexString hexStr: Swift.String) -> UIKit.UIColor
  public static func colorFor(light: UIKit.UIColor, dark: UIKit.UIColor) -> UIKit.UIColor
}
@objc public protocol THRJSQMessageAvatarImageDataSource : ObjectiveC.NSObjectProtocol {
  @objc var avatarImage: UIKit.UIImage? { get set }
  @objc var avatarHighlightedImage: UIKit.UIImage? { get set }
  @objc var avatarPlaceholderImage: UIKit.UIImage { get }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class THRJSQPhotoMediaItem : ChatCenterUI.THRJSQMediaItem, Foundation.NSSecureCoding {
  @objc public init(image: UIKit.UIImage?, messageId: Swift.String?, maskImage: UIKit.UIImage, strokedMask: UIKit.UIImage, emptyImageColor: UIKit.UIColor, dataProvider: ChatCenterUI.CCDataProvider, errorColor: UIKit.UIColor)
  @objc convenience public init(url: Foundation.URL?, link: Swift.String?, messageId: Swift.String?, maskImage: UIKit.UIImage, strokedMask: UIKit.UIImage, emptyImageColor: UIKit.UIColor, errorColor: UIKit.UIColor, dataProvider: ChatCenterUI.CCDataProvider, shouldDownloadInitially: Swift.Bool, state: ChatCenterUI.THRJSQMessageAttachmentState)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc override public var appliesMediaViewMaskAsOutgoing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override public var fileData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc public var isImageDownloadFailed: Swift.Bool
  @objc public var messageId: Swift.String?
  @objc public var imageURL: Foundation.URL?
  @objc public var link: Swift.String?
  @objc public var localURL: Foundation.URL?
  @objc public var maskImage: UIKit.UIImage
  @objc public var strokedMaskImage: UIKit.UIImage
  @objc public var emptyImageColor: UIKit.UIColor
  @objc public var errorColor: UIKit.UIColor
  @objc public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc override public func mediaView() -> UIKit.UIView?
  @objc override public func mediaQuotedView() -> UIKit.UIImageView
  @objc override public func fileName() -> Swift.String?
  @objc override public func mediaHash() -> Swift.UInt
  @objc override public func mediaDataType() -> Swift.String
  @objc override public func mediaData() -> Any?
  @objc override public func toDictionary() -> [Swift.String : Any]
  @objc override public func sentSuccessfully(_ success: Swift.Bool)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc public func downloadImage()
  @objc deinit
}
@objc @objcMembers final public class QuoteNewData : ObjectiveC.NSObject {
  @objc public init(message: ChatCenterUI.THRMessage, isOutgoing: Swift.Bool)
  @objc deinit
}
@objc public protocol QuoteNewViewControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc(didTapQuoteViewController:) func didTapQuote(quoteViewController: ChatCenterUI.QuoteNewViewController)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency final public class QuoteNewViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public init(quoteData: ChatCenterUI.QuoteNewData)
  @objc @_Concurrency.MainActor @preconcurrency final public var delegate: (any ChatCenterUI.QuoteNewViewControllerDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @objc @_Concurrency.MainActor @preconcurrency final public func tapDone()
  @objc @_Concurrency.MainActor @preconcurrency final public func setQuotedMediaImage(image: UIKit.UIImage?)
  @objc @_Concurrency.MainActor @preconcurrency final public func getHeight(By width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ChatTypography : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var title: UIKit.UIFont
  @objc public var largeTitle: UIKit.UIFont
  @objc public var subtitle: UIKit.UIFont
  @objc public var heading1: UIKit.UIFont
  @objc public var heading2: UIKit.UIFont
  @objc public var body: UIKit.UIFont
  @objc public var bold: UIKit.UIFont
  @objc public var message: UIKit.UIFont
  @objc public var caption: UIKit.UIFont
  @objc public var caption2: UIKit.UIFont
  @objc public var footnote: UIKit.UIFont
  @objc deinit
}
public struct ChatConfig : Swift.CustomDebugStringConvertible {
  public init(transportConfig: ChatCenterUI.ChatTransportConfig, networkConfig: ChatCenterUI.ChatNetworkConfig = .init())
  public let transportConfig: ChatCenterUI.ChatTransportConfig
  public var networkConfig: ChatCenterUI.ChatNetworkConfig
  public var searchEnabled: Swift.Bool
  public var userInputEnabled: Swift.Bool
  public var keepSocketActive: Swift.Bool
  public var scrollToLatest: Swift.Bool
  public var linkPreviewEnabled: Swift.Bool
  public var surveyCompletionDelay: Swift.Int
  public var voiceRecordingEnabled: Swift.Bool
  public var historyLoadingCount: Swift.Int
  public var debugDescription: Swift.String {
    get
  }
}
public struct ChatNetworkConfig : Swift.CustomDebugStringConvertible {
  public init(httpConfig: ChatCenterUI.ChatNetworkConfig.HTTPConfig = HTTPConfig(), wsConfig: ChatCenterUI.ChatNetworkConfig.WSConfig = WSConfig(), sslPinning: ChatCenterUI.ChatNetworkConfig.SSLPinningConfig = SSLPinningConfig())
  public struct HTTPConfig {
    public init(connectionTimeout: Foundation.TimeInterval = 30, downloadTimeout: Foundation.TimeInterval = 30, uploadTimeout: Foundation.TimeInterval = 120)
    public var connectionTimeout: Foundation.TimeInterval
    public var downloadTimeout: Foundation.TimeInterval
    public var uploadTimeout: Foundation.TimeInterval
  }
  public struct WSConfig {
    public init(connectionTimeout: Foundation.TimeInterval = 30, sendTimeout: Foundation.TimeInterval = 20)
    public var connectionTimeout: Foundation.TimeInterval
    public var sendTimeout: Foundation.TimeInterval
  }
  public struct SSLPinningConfig {
    public init(allowUntrustedSSLCertificate: Swift.Bool = false, trustedCertificates: [ChatCenterUI.ChatSSLCertificate] = [ChatSSLCertificate]())
    public var allowUntrustedSSLCertificate: Swift.Bool
    public var trustedCertificates: [ChatCenterUI.ChatSSLCertificate]
  }
  public var httpConfig: ChatCenterUI.ChatNetworkConfig.HTTPConfig
  public var wsConfig: ChatCenterUI.ChatNetworkConfig.WSConfig
  public var sslPinning: ChatCenterUI.ChatNetworkConfig.SSLPinningConfig
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class THRProxyMessage : ChatCenterUI.THRMessage {
  @available(*, unavailable)
  @objc required public init?(coder _: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class THRQuickRepliesMessage : ChatCenterUI.THRProxyMessage {
  @objc override public var isMediaMessage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override public var quickReplies: [ChatCenterUI.QuickReply]? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public enum THRJSQAudioMediaStatus : Swift.UInt {
  case none = 0
  case processing
  case updated
  case success
  case maxSpeech
  case error
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public protocol THRJSQAudioMediaItemDelegate {
  @objc func audioMediaItem(_ audioMediaItem: ChatCenterUI.THRJSQAudioMediaItem, didChangeAudioCategory category: AVFAudio.AVAudioSession.Category, options: AVFAudio.AVAudioSession.CategoryOptions, error: (any Swift.Error)?)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class THRJSQAudioMediaItem : ChatCenterUI.THRJSQMediaItem, AVFAudio.AVAudioPlayerDelegate, Foundation.NSSecureCoding {
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public init(audioData: Foundation.Data, audioViewAttributes: ChatCenterUI.THRJSQAudioMediaViewAttributes, dataProvider: ChatCenterUI.CCDataProvider)
  @objc public init(audioUrl: Foundation.URL?, audioViewAttributes: ChatCenterUI.THRJSQAudioMediaViewAttributes, dataProvider: ChatCenterUI.CCDataProvider)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc override public var fileData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc public var audioViewAttributes: ChatCenterUI.THRJSQAudioMediaViewAttributes
  @objc public var audioData: Foundation.Data?
  @objc public var audioUrl: Foundation.URL?
  @objc public var localURL: Foundation.URL?
  @objc public var mediaURL: Foundation.URL?
  @objc public var speechStatus: ChatCenterUI.THRJSQAudioMediaStatus
  @objc public var cachedMediaView: UIKit.UIView?
  @objc override public func mediaData() -> Any?
  @objc override public func fileName() -> Swift.String?
  @objc override public func mediaView() -> UIKit.UIView?
  @objc override public func mediaQuotedView() -> UIKit.UIImageView
  @objc override public func mediaViewDisplaySize() -> CoreFoundation.CGSize
  @objc override public func mediaHash() -> Swift.UInt
  @objc override public func mediaDataType() -> Swift.String
  @objc override public func toDictionary() -> [Swift.String : Any]
  @objc override public func failedText() -> Swift.String?
  @objc public class func convertStatusByName(_ name: Swift.String?) -> ChatCenterUI.THRJSQAudioMediaStatus
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc public func downloadAudio()
  @objc public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully _: Swift.Bool)
  @objc deinit
}
public protocol ChatCenterUISDKDelegate : AnyObject {
  func chatCenterUI(chatCenter: ChatCenterUI.ChatCenterUISDK, didChangeUnreadMessages count: Swift.Int)
  func chatCenterUI(chatCenter: ChatCenterUI.ChatCenterUISDK, didReceiveNetwork error: any Swift.Error)
  func chatCenterUI(chatCenter: ChatCenterUI.ChatCenterUISDK, didOpen url: Foundation.URL)
}
extension ChatCenterUI.ChatCenterUISDKDelegate {
  public func chatCenterUI(chatCenter _: ChatCenterUI.ChatCenterUISDK, didChangeUnreadMessages _: Swift.Int)
  public func chatCenterUI(chatCenter _: ChatCenterUI.ChatCenterUISDK, didReceiveNetwork _: any Swift.Error)
  public func chatCenterUI(chatCenter _: ChatCenterUI.ChatCenterUISDK, didOpen _: Foundation.URL)
}
public enum ChatMessage {
  case text(Swift.String)
  case image(UIKit.UIImage)
  case location(CoreFoundation.CGPoint)
}
@objc @objcMembers public class ChatFlow : ObjectiveC.NSObject {
  @objc public init(components: ChatCenterUI.ChatComponents)
  @objc public var navigationBarStyle: ChatCenterUI.NavigationBarStyle
  @objc public var loadingChat: ChatCenterUI.LoadingChatStyle
  @objc public var typing: ChatCenterUI.ChatText?
  @objc public var loaderChatController: ChatCenterUI.ErrorPlaceholderChatStyle
  @objc public var chatPlaceholder: ChatCenterUI.PlaceholderChatStyle
  @objc public var incomeMessages: ChatCenterUI.ChatMessagesStyles {
    @objc get
    @objc set
  }
  @objc public var outcomeMessages: ChatCenterUI.ChatMessagesStyles {
    @objc get
    @objc set
  }
  @objc public var systemMessages: ChatCenterUI.SystemMessagesConfig {
    @objc get
    @objc set
  }
  @objc public var inputViewStyle: ChatCenterUI.InputViewStyle
  @objc public var quickRepliesStyle: ChatCenterUI.QuickReplyStyle {
    @objc get
    @objc set
  }
  @objc public var photoPickerStyle: ChatCenterUI.PhotoPickerChatStyle
  @objc public var fileViewerStyle: ChatCenterUI.FileViewerChatStyle
  @objc public var toastAlertStyle: ChatCenterUI.ToastAlertStyle {
    @objc get
    @objc set
  }
  @objc public var scrollToTopUnreadMessagesButtonStyle: ChatCenterUI.ScrollToUnreadMessageButtonStyle {
    @objc get
    @objc set
  }
  @objc public var scrollToBottomUnreadMessagesButtonStyle: ChatCenterUI.ScrollToUnreadMessageButtonStyle {
    @objc get
    @objc set
  }
  @objc public var backgroundColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public func messageStyles(for isOutgoing: Swift.Bool) -> ChatCenterUI.ChatMessagesStyles
  @objc deinit
}
@objc extension UIKit.UIImage {
  @objc dynamic public var name: Swift.String {
    @objc get
  }
  @objc dynamic public func getCircleImage(tintColor: UIKit.UIColor, bgColor: UIKit.UIColor, size: CoreFoundation.CGSize) -> UIKit.UIImage
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ToastAlertStyle : ChatCenterUI.ChatStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc public var text: ChatCenterUI.ChatText
  @objc public var size: CoreFoundation.CGSize
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CCFileSettings : ObjectiveC.NSObject {
  @objc public static let shared: ChatCenterUI.CCFileSettings
  @objc public static func isSupportedExtension(for url: Foundation.URL?) -> Swift.Bool
  @objc public static func getDocumentTypes() -> [Swift.String]
  @objc public static func getFileUTI(by url: Foundation.URL) -> Swift.String?
  @objc public static func isImageUTI(_ fileUTI: Swift.String) -> Swift.Bool
  @objc public static func mimeType(for url: Foundation.URL) -> Swift.String
  @objc public func setConfig(_ dictionary: [Swift.String : Any]?)
  @objc public func fileSizeLimit() -> Swift.Int
  @objc public func showAccessDeniedAlert(in viewController: UIKit.UIViewController) -> Swift.Bool
  @objc public func fileExtensions() -> Swift.Set<Swift.String>
  @objc public func hasAccessToPhotos() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol THRJSQFileMediaData : ChatCenterUI.THRJSQMessageMediaData {
  @objc func fileName() -> Swift.String?
  @objc var fileData: Foundation.Data? { get set }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class THRJSQSystemMessageItem : ChatCenterUI.THRJSQMediaItem {
  @objc public init(image: UIKit.UIImage?, title: Swift.String?, subTitle: Swift.String?)
  @objc public var title: Swift.String?
  @objc public var subTitle: Swift.String?
  @objc override public func mediaView() -> UIKit.UIView?
  @objc override public func mediaViewDisplaySize() -> CoreFoundation.CGSize
  @objc override public func mediaHash() -> Swift.UInt
  @objc override public func mediaDataType() -> Swift.String
  @objc override public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ChatButtonColor : ObjectiveC.NSObject {
  @objc public init(normal: UIKit.UIColor, highlighted: UIKit.UIColor, disabled: UIKit.UIColor)
  @objc public var normal: UIKit.UIColor
  @objc public var highlighted: UIKit.UIColor
  @objc public var disabled: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class THRSearchViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public var didSelectMessage: ((_ message: ChatCenterUI.THRMessage) -> Swift.Void)?
  @objc @_Concurrency.MainActor @preconcurrency weak public var dataProvider: ChatCenterUI.CCDataProvider?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @objc @_Concurrency.MainActor @preconcurrency public func setAvatars(_ avatars: [Swift.String : ChatCenterUI.THRJSQMessagesAvatarImage]?)
  @objc @_Concurrency.MainActor @preconcurrency public func setMessages(_ messages: [ChatCenterUI.THRMessage]?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ChatCenterUI.THRSearchViewController : UIKit.UISearchBarDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func searchBarCancelButtonClicked(_: UIKit.UISearchBar)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange _: Swift.String)
}
public struct MultipartFormData {
  public init(file name: Swift.String, data: Foundation.Data)
  public let boundary: Swift.String
  public var httpContentTypeHeaderValue: Swift.String {
    get
  }
  public var httpBody: Foundation.Data {
    get
  }
  public mutating func add(key: Swift.String, value: Swift.String)
  public mutating func add(key: Swift.String, fileName: Swift.String, fileMimeType: Swift.String, fileData: Foundation.Data)
}
@objc @objcMembers public class ChatComponents : ObjectiveC.NSObject {
  @objc public init(images: ChatCenterUI.ChatImages = .init(), colors: ChatCenterUI.ChatColors = .init(), typography: ChatCenterUI.ChatTypography = .init())
  @objc public var navigationBarStyle: ChatCenterUI.NavigationBarStyle {
    @objc get
    @objc set
  }
  @objc public var loadingChatStyle: ChatCenterUI.LoadingChatStyle {
    @objc get
    @objc set
  }
  @objc public var chatPlaceholderStyle: ChatCenterUI.PlaceholderChatStyle {
    @objc get
    @objc set
  }
  @objc public var errorPlaceholderStyle: ChatCenterUI.ErrorPlaceholderChatStyle
  @objc public var inputTextStyle: ChatCenterUI.InputChatStyle {
    @objc get
    @objc set
  }
  @objc public var searchBarStyle: ChatCenterUI.SearchBarChatStyle {
    @objc get
    @objc set
  }
  @objc public var inputViewStyle: ChatCenterUI.InputViewStyle {
    @objc get
    @objc set
  }
  @objc public var audioPlayerStyle: ChatCenterUI.AudioPlayerChatStyle
  @objc public var photoPickerStyle: ChatCenterUI.PhotoPickerChatStyle
  @objc public var fileViewerStyle: ChatCenterUI.FileViewerChatStyle
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AudioMessageStyle : ChatCenterUI.MessageStyle {
  @objc public init(progressLabelStyle: ChatCenterUI.TextChatStyle, timeLabelStyle: ChatCenterUI.TextChatStyle, alertLabelStyle: ChatCenterUI.TextChatStyle, textViewStyle: ChatCenterUI.TextChatStyle, audioPlayer: ChatCenterUI.AudioPlayerChatStyle)
  @objc public var font: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc public var progressLabelStyle: ChatCenterUI.TextChatStyle
  @objc public var timeLabelStyle: ChatCenterUI.TextChatStyle
  @objc public var alertLabelStyle: ChatCenterUI.TextChatStyle
  @objc public var textViewStyle: ChatCenterUI.TextChatStyle
  @objc public var audioPlayer: ChatCenterUI.AudioPlayerChatStyle
  @objc public var voiceMessagePlay: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var voiceMessagePause: UIKit.UIImage {
    @objc get
    @objc set
  }
  @objc public var previewVoiceMessagePlayPause: UIKit.UIColor
  @objc public var previewVoiceMessageBackground: UIKit.UIColor
  @objc public var previewVoiceMessageProgress: UIKit.UIColor
  @objc public var voiceMessagePlayPause: UIKit.UIColor
  @objc public var voiceMessageProgress: UIKit.UIColor
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SearchMessageStyle : ChatCenterUI.MessageStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc public var dateStyle: ChatCenterUI.TextChatStyle
  @objc public var authorStyle: ChatCenterUI.TextChatStyle
  @objc public var fileNameStyle: ChatCenterUI.TextChatStyle
  @objc public var messageStyle: ChatCenterUI.TextChatStyle
  @objc public var messageMatchStyle: ChatCenterUI.TextChatStyle
  @objc deinit
}
@objc @objcMembers public class THRRoutingParams : ObjectiveC.NSObject {
  @objc public init(priority: Swift.Int, skillId: Swift.Int, expiredAt: Swift.String?)
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@objc extension Foundation.DateFormatter {
  @objc public static let currentDateFormatter: Foundation.DateFormatter
  @objc public static func formatFrom(date: Foundation.Date) -> Swift.String
  @objc public static func formatFrom(string: Swift.String) -> Foundation.Date
  @objc public static let timeOnlyFormatter: Foundation.DateFormatter
  @objc public static let dateOnlyFormatter: Foundation.DateFormatter
  @objc public static let dateAndTimeFormatter: Foundation.DateFormatter
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class InputViewStyle : ChatCenterUI.ChatStyle {
  @objc public init(inputText: ChatCenterUI.InputChatStyle, components: ChatCenterUI.ChatComponents)
  @objc public var sendButtonStyle: ChatCenterUI.IconButtonChatStyle
  @objc public var attachButtonStyle: ChatCenterUI.IconButtonChatStyle
  @objc public var deleteButtonStyle: ChatCenterUI.IconButtonChatStyle
  @objc public var voiceButtonStyle: ChatCenterUI.IconButtonChatStyle
  @objc public var inputText: ChatCenterUI.InputChatStyle
  @objc public var showAttachButton: Swift.Bool
  @objc public var inputQuoteTitle: ChatCenterUI.TextChatStyle
  @objc public var inputQuoteSubtitle: ChatCenterUI.TextChatStyle
  @objc public var toolbarQuotedMessageAuthorStyle: ChatCenterUI.TextChatStyle {
    @objc get
    @objc set
  }
  @objc public var toolbarQuotedMessageStyle: ChatCenterUI.TextChatStyle {
    @objc get
    @objc set
  }
  @objc public var separatorLineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var voiceMessageRecordButtonIcon: ChatCenterUI.ChatImage {
    @objc get
    @objc set
  }
  @objc public var voiceMessageSendButtonIcon: ChatCenterUI.ChatImage {
    @objc get
    @objc set
  }
  @objc deinit
}
public struct ChatLocalizationConfig {
  public init(bundle: Foundation.Bundle, tableName: Swift.String)
}
@objc @objcMembers public class ChatText : ObjectiveC.NSObject {
  @objc public init(text: Swift.String? = nil, style: ChatCenterUI.TextChatStyle)
  @objc final public let text: Swift.String?
  @objc final public let style: ChatCenterUI.TextChatStyle
  @objc deinit
}
@objc public protocol THRJSQMessageBubbleImageDataSource : ObjectiveC.NSObjectProtocol {
  @objc func messageBubbleImage() -> UIKit.UIImage
  @objc func messageBubbleHighlightedImage() -> UIKit.UIImage
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class CCUnselectableTextView : UIKit.UITextView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var selectedTextRange: UIKit.UITextRange? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @available(iOS 7.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers final public class SystemFilePickerViewController : ObjectiveC.NSObject {
  @objc public init(hasAccessToPhotos: Swift.Bool, hasAccessFile: Swift.Bool, documentTypes: [Swift.String], fileSizeLimit: Swift.Double)
  @objc final public var dismissAction: (() -> Swift.Void)?
  @objc final public var selectImageAction: ((UIKit.UIImage) -> Swift.Void)?
  @objc final public var selectFileAction: ((Foundation.URL) -> Swift.Void)?
  @objc final public var maxImagesCount: Swift.Int
  @objc final public var maxPhotoSide: CoreFoundation.CGFloat
  @objc final public func show(in viewController: UIKit.UIViewController)
  @objc deinit
}
extension ChatCenterUI.SystemFilePickerViewController : PhotosUI.PHPickerViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency final public func picker(_ picker: PhotosUI.PHPickerViewController, didFinishPicking results: [PhotosUI.PHPickerResult])
}
extension ChatCenterUI.SystemFilePickerViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor @preconcurrency @objc final public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension ChatCenterUI.SystemFilePickerViewController : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func documentPicker(_: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class MessageStyle : ChatCenterUI.ChatStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc override public init(images: ChatCenterUI.ChatImages, colors: ChatCenterUI.ChatColors, typography: ChatCenterUI.ChatTypography)
  @objc deinit
}
@objc @objcMembers public class THRJSQAttachmentUpdateItem : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public init(attachmentId: Swift.Int, originalUrl: Foundation.URL?, url: Swift.String?, result: Swift.String?, state: ChatCenterUI.THRJSQMessageAttachmentState, errorMessage: Swift.String?, errorType: ChatCenterUI.THRJSQMessageAttachmentErrorType, localGUID: Swift.String?, name: Swift.String?, type: Swift.String?, size: Swift.Int, speechStatus: Swift.String?)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc public var attachmentId: Swift.Int
  @objc public var originalUrl: Foundation.URL?
  @objc public var result: Swift.String?
  @objc public var state: ChatCenterUI.THRJSQMessageAttachmentState
  @objc public var errorMessage: Swift.String?
  @objc public var errorType: ChatCenterUI.THRJSQMessageAttachmentErrorType
  @objc public var localGUID: Swift.String?
  @objc public var name: Swift.String?
  @objc public var type: Swift.String?
  @objc public var size: Swift.Int
  @objc public var speechStatus: Swift.String?
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public static func parseAttachmentStateByName(_ name: Swift.String?) -> ChatCenterUI.THRJSQMessageAttachmentState
  @objc public static func parseAttachmentErrorTypeByName(_ name: Swift.String?) -> ChatCenterUI.THRJSQMessageAttachmentErrorType
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension ChatCenterUI.CCDataProvider {
  @objc final public var userInputEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var dataStoreHTTPHeaders: [Swift.String : Swift.String] {
    @objc get
  }
}
public struct ChatSSLCertificate {
  public init(contentsOf url: Foundation.URL)
}
@objc public protocol QuickReplyCellDelegate {
  @objc func didSelectQuickReply(_ quickReply: ChatCenterUI.QuickReply)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class QuickReplyCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency public class var sizingCell: ChatCenterUI.QuickReplyCell {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public var colView: UIKit.UICollectionView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc @_Concurrency.MainActor @preconcurrency public class func cellIdentifier() -> Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public func configure(quickReply: ChatCenterUI.QuickReply, delegate: any ChatCenterUI.QuickReplyCellDelegate)
  @objc @_Concurrency.MainActor @preconcurrency public func setWidth(_: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency public func getSize(width: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  @objc deinit
}
@objc @objcMembers public class THRJSQMessageMediaOptional : ObjectiveC.NSObject, Foundation.NSSecureCoding {
  @objc public init(type: Swift.String?, name: Swift.String?, size: Swift.Int, lastModified: Swift.Int)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var type: Swift.String?
  @objc public var name: Swift.String?
  @objc public var size: Swift.Int
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class THRSpecialist : ChatCenterUI.THRParticipant {
  @objc public init(identifier: Swift.String, name: Swift.String, position: Swift.String, sex: ChatCenterUI.THRParticipantSex)
  @objc convenience public init(dict: [Swift.AnyHashable : Any])
  @objc final public let position: Swift.String
  @objc public var info: Swift.String
  @objc public var organizationUnit: Swift.String?
  @objc public var alias: Swift.String?
  @objc override public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class THRJSQMessagesAvatarImage : ObjectiveC.NSObject, ChatCenterUI.THRJSQMessageAvatarImageDataSource {
  @objc convenience public init(placeholder placeholderImage: UIKit.UIImage)
  @objc public init(avatarImage: UIKit.UIImage? = nil, highlightedImage: UIKit.UIImage? = nil, placeholderImage: UIKit.UIImage)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var originalImage: UIKit.UIImage?
  @objc public var avatarImage: UIKit.UIImage?
  @objc public var avatarHighlightedImage: UIKit.UIImage?
  @objc final public let avatarPlaceholderImage: UIKit.UIImage
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ChatImages : ObjectiveC.NSObject {
  @objc public var searchBarImage: ChatCenterUI.ChatImage
  @objc public var backButtonImage: ChatCenterUI.ChatImage
  @objc public var nextButtonImage: ChatCenterUI.ChatImage
  @objc public var sendButtonImage: ChatCenterUI.ChatImage
  @objc public var attachButtonImage: ChatCenterUI.ChatImage
  @objc public var emptyChatPlaceholderImage: ChatCenterUI.ChatImage
  @objc public var errorChatPlaceholderImage: ChatCenterUI.ChatImage
  @objc public var searchNotFoundPlaceholderImage: ChatCenterUI.ChatImage
  @objc public var likeEmptyImage: ChatCenterUI.ChatImage
  @objc public var likeFullImage: ChatCenterUI.ChatImage
  @objc public var dislikeEmptyImage: ChatCenterUI.ChatImage
  @objc public var dislikeFullImage: ChatCenterUI.ChatImage
  @objc public var starRatingEmptyImage: ChatCenterUI.ChatImage
  @objc public var starRatingFullImage: ChatCenterUI.ChatImage
  @objc public var scheduleImage: ChatCenterUI.ChatImage
  @objc public var messageBubbleFilledMaskImage: ChatCenterUI.ChatImage
  @objc public var messageBubbleStrokedMaskImage: ChatCenterUI.ChatImage
  @objc public var scrollToTopImage: ChatCenterUI.ChatImage
  @objc public var scrollToBottomImage: ChatCenterUI.ChatImage
  @objc public var avatarPlaceholderImage: ChatCenterUI.ChatImage
  @objc public var closeButtonImage: ChatCenterUI.ChatImage
  @objc public var fileImage: ChatCenterUI.ChatImage
  @objc public var menuCopyImage: ChatCenterUI.ChatImage
  @objc public var menuQuoteImage: ChatCenterUI.ChatImage
  @objc public var keyboardShowImage: ChatCenterUI.ChatImage
  @objc public var keyboardHideImage: ChatCenterUI.ChatImage
  @objc public var voiceButtonImage: ChatCenterUI.ChatImage
  @objc public var voiceSendButtonImage: ChatCenterUI.ChatImage
  @objc public var voicePlayImage: ChatCenterUI.ChatImage
  @objc public var voicePauseImage: ChatCenterUI.ChatImage
  @objc public var sentStatusImage: ChatCenterUI.ChatImage
  @objc public var pendingStatusImage: ChatCenterUI.ChatImage
  @objc public var readStatusImage: ChatCenterUI.ChatImage
  @objc public var errorInfoImage: ChatCenterUI.ChatImage
  @objc public var alertImage: ChatCenterUI.ChatImage
  @objc public var shieldImage: ChatCenterUI.ChatImage
  @objc public var editImage: ChatCenterUI.ChatImage
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class ChatImage : ObjectiveC.NSObject {
  @objc public init(named: Swift.String, tintColor: UIKit.UIColor? = nil)
  @objc public init(system name: Swift.String, tintColor: UIKit.UIColor? = nil)
  @objc public init(system name: Swift.String, size: CoreFoundation.CGFloat = 14, tintColor: UIKit.UIColor? = nil)
  @objc final public let image: UIKit.UIImage
  @objc final public let tintColor: UIKit.UIColor?
  @objc deinit
}
@objc public class SearchFlow : ObjectiveC.NSObject {
  public init(components: ChatCenterUI.ChatComponents)
  public var backgroundColor: UIKit.UIColor
  public var navigationBarStyle: ChatCenterUI.NavigationBarStyle
  public var searchBarStyle: ChatCenterUI.SearchBarChatStyle
  public var searchButton: ChatCenterUI.IconButtonChatStyle
  public var searchMessageStyle: ChatCenterUI.SearchMessageStyle
  public var imageNotFound: ChatCenterUI.ChatImage
  public var titleNotFound: ChatCenterUI.ChatText
  public var searchIconEnabled: Swift.Bool
  @objc deinit
}
@objc extension Foundation.NSError {
  @objc dynamic public class func applicationError(with description: Swift.String) -> Foundation.NSError
  @objc dynamic public class func applicationError(with code: Swift.Int, and description: Swift.String) -> Foundation.NSError
  @objc dynamic public class func applicationError(with code: Swift.Int, localizedDescription: Swift.String) -> Foundation.NSError
  @objc dynamic public class func network(error message: Swift.String, category: Swift.String) -> Swift.String
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ChatSurveyIcon : ObjectiveC.NSObject {
  @objc final public let empty: ChatCenterUI.ChatImage
  @objc final public let full: ChatCenterUI.ChatImage
  @objc deinit
}
@objc public enum SurveyMessageType : Swift.Int {
  case system
  case user
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SurveyMessageStyle : ChatCenterUI.MessageStyle {
  @objc public var type: ChatCenterUI.SurveyMessageType
  @objc public var questionTopLabel: ChatCenterUI.TextChatStyle?
  @objc public var questionBottomLabel: ChatCenterUI.TextChatStyle?
  @objc public var voteLikeIcon: ChatCenterUI.ChatSurveyIcon?
  @objc public var voteDislikeIcon: ChatCenterUI.ChatSurveyIcon?
  @objc public var voteStarIcon: ChatCenterUI.ChatSurveyIcon?
  @objc public var emptyStarColor: UIKit.UIColor
  @objc public var fullStarColor: UIKit.UIColor
  @objc public var voteStarEnabledColor: UIKit.UIColor
  @objc public var voteStarDisabledColor: UIKit.UIColor
  @objc public var voteStarCompletedColor: UIKit.UIColor
  @objc public var voteLikeEnabledColor: UIKit.UIColor
  @objc public var voteLikeDisabledColor: UIKit.UIColor
  @objc public var voteLikeCompleted: UIKit.UIColor
  @objc public var labelOnStar: ChatCenterUI.TextChatStyle {
    @objc get
    @objc set
  }
  @objc public var labelUnderStar: ChatCenterUI.TextChatStyle {
    @objc get
    @objc set
  }
  @objc public var text: ChatCenterUI.TextChatStyle {
    @objc get
    @objc set
  }
  @objc public var buttonsText: UIKit.UIColor
  @objc public var buttonsBackground: UIKit.UIColor
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PlaceholderChatStyle : ChatCenterUI.ChatStyle {
  @objc public init(title: ChatCenterUI.ChatText? = nil, components: ChatCenterUI.ChatComponents)
  @objc public var image: ChatCenterUI.ChatImage
  @objc public var title: ChatCenterUI.ChatText
  @objc public var subtitle: ChatCenterUI.ChatText
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class EDNALogger : ObjectiveC.NSObject {
  @objc public func shareLogs(in viewController: UIKit.UIViewController)
  @objc public func logInfo(_ message: Swift.String)
  @objc public func logNetwork(_ message: Swift.String, body: Swift.String? = nil)
  @objc public func logWebSocket(_ message: Swift.String, body: Swift.String? = nil)
  @objc public func logUserInterface(_ message: Swift.String)
  @objc public func logError(_ message: Swift.String)
  @objc deinit
}
@objc public enum Position : Swift.UInt {
  case top
  case bottom
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class ToastView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(title: Swift.String, icon: UIKit.UIImage?, position: ChatCenterUI.Position)
  @objc @_Concurrency.MainActor @preconcurrency public init(title: Swift.String, icon: UIKit.UIImage? = nil, position: ChatCenterUI.Position = .top, onTap _: (() -> Swift.Void)? = nil)
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func show()
}
@objc @objcMembers public class SystemMessagesConfig : ObjectiveC.NSObject {
  @objc public init(components: ChatCenterUI.ChatComponents)
  @objc public var operatorJoinedStyle: ChatCenterUI.OperatorJoinedMessageStyle
  @objc public var scheduleStyle: ChatCenterUI.ScheduleMessageStyle
  @objc public var dateMessageStyle: ChatCenterUI.TextChatStyle
  @objc public var surveyMessageStyle: ChatCenterUI.SurveyMessageStyle
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class EDNAPreloadView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame _: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor @preconcurrency public func startAnimating()
  @objc @_Concurrency.MainActor @preconcurrency public func stopAnimating()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class THRJSQAudioMediaViewAttributes : ObjectiveC.NSObject {
  @objc public init(playButtonImage: UIKit.UIImage, pauseButtonImage: UIKit.UIImage, labelFont: UIKit.UIFont, showFractionalSeconds: Swift.Bool, backgroundColor: UIKit.UIColor, tintColor: UIKit.UIColor, controlInsets: UIKit.UIEdgeInsets, controlPadding: CoreFoundation.CGFloat, audioCategory: AVFAudio.AVAudioSession.Category, audioCategoryOptions: AVFAudio.AVAudioSession.CategoryOptions)
  @objc override convenience dynamic public init()
  @objc public var playButtonImage: UIKit.UIImage
  @objc public var pauseButtonImage: UIKit.UIImage
  @objc public var showFractionalSeconds: Swift.Bool
  @objc public var tintColor: UIKit.UIColor
  @objc public var controlInsets: UIKit.UIEdgeInsets
  @objc public var controlPadding: CoreFoundation.CGFloat
  @objc public var bubbleMessageFont: UIKit.UIFont?
  @objc public var bubbleTimeFont: UIKit.UIFont?
  @objc public var outgoingTimeColor: UIKit.UIColor?
  @objc public var incomingTimeColor: UIKit.UIColor?
  @objc public var failedColor: UIKit.UIColor?
  @objc deinit
}
@objc extension UIKit.UIApplication {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public class func open(selected url: Foundation.URL)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class AudioPlayerChatStyle : ChatCenterUI.ChatStyle {
  @objc public init(recordButton: ChatCenterUI.IconButtonChatStyle, playButton: ChatCenterUI.IconButtonChatStyle, pauseButton: ChatCenterUI.IconButtonChatStyle, progress: ChatCenterUI.ProgressViewStyle)
  @objc public var recordButton: ChatCenterUI.IconButtonChatStyle
  @objc public var playButton: ChatCenterUI.IconButtonChatStyle
  @objc public var pauseButton: ChatCenterUI.IconButtonChatStyle
  @objc public var progress: ChatCenterUI.ProgressViewStyle
  @objc deinit
}
public struct ChatUser {
  public init(identifier: Swift.String, name: Swift.String? = nil, data: [Swift.String : Swift.String]? = nil)
}
@objc @objcMembers public class IconButtonChatStyle : ChatCenterUI.ButtonChatStyle {
  @objc public init(icon: UIKit.UIImage, color: ChatCenterUI.ChatButtonColor? = nil)
  @objc public var icon: UIKit.UIImage?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CCHistoryLoadingOptions : ObjectiveC.NSObject {
  @objc public var firstLoading: Swift.Bool
  @objc public var keepContentOffset: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum CCChatModelConfigState : Swift.UInt8 {
  case notLoaded
  case loading
  case loaded
  case error
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public protocol CCChatModelDelegate : ObjectiveC.NSObjectProtocol {
  @objc func initChat()
  @objc func initChatNoClearHistory()
  @objc func messagesUpdated()
  @objc func specialistConnected()
  @objc func specialistDisconnected()
  @objc func searchingForSpecialist(_ searching: Swift.Bool)
  @objc func finishReceivingPhotoMessage(_ item: Any)
  @objc func showQuickReplies(_ quickReplies: [Any]?)
  @objc func hideQuickRepliesIfNeeded()
  @objc func finishReceivingOldMessages(_ count: Swift.Int, options: Any)
  @objc func finishSendingMessageAnimated(_ animated: Swift.Bool, clearInputText: Swift.Bool)
  @objc func didTapToScroll(_ message: ChatCenterUI.THRMessage, animated: Swift.Bool)
  @objc func updateMessages(_ messages: [ChatCenterUI.THRMessage])
  @objc func collectionViewReloadData()
  @objc func collectionViewUpdateItemsAtIndexPaths(_ paths: [Foundation.NSIndexPath])
  @objc func markIncomingMessagesRead(_ messages: [ChatCenterUI.THRMessage], completion: (() -> Swift.Void)?)
  @objc func movedItem(from: Swift.Int, toIdx: Swift.Int)
  @objc func clientConnected(_ client: ChatCenterUI.THRClient)
  @objc func specialistTyping(_: Swift.Bool)
  @objc func removeSurvey(_ survey: ChatCenterUI.THRSurvey?)
  @objc func setInputToolbarEnabledIfPossible(_ enabled: Swift.Bool)
  @objc func setScheduleTitleMessage(_ title: Swift.String?)
  @objc func inputToolbarSetChatInactive(_ state: Swift.Bool)
  @objc func finishReceivingMessage()
  @objc func preloadChatViewControllerSet(error: (any Swift.Error)?)
  @objc func checkLaunchViewVisibility(_ isLoadedHistory: Swift.Bool)
  @objc func addFile(_ file: ChatCenterUI.THRJSQFile)
}
@objc @objcMembers public class CCChatModel : ObjectiveC.NSObject {
  @objc public init(dataProvider: ChatCenterUI.CCDataProvider)
  @objc deinit
  @objc weak public var viewDelegate: (any ChatCenterUI.CCChatModelDelegate)?
  @objc public var historyIsLoaded: Swift.Bool
  @objc public var cellSizeCache: Foundation.NSMutableDictionary
  @objc public var state: ChatCenterUI.CCChatState
  @objc public var specialist: ChatCenterUI.THRSpecialist?
  @objc public var configState: ChatCenterUI.CCChatModelConfigState
  @objc public var messages: [ChatCenterUI.THRMessage]
  @objc weak public var dataProvider: ChatCenterUI.CCDataProvider?
  @objc public var typingMessagesIntervalSeconds: Swift.Int {
    @objc get
  }
  @objc public var unreadMessages: [ChatCenterUI.THRMessage] {
    @objc get
  }
  @objc public func initChat()
  @objc public func reinitChat()
  @objc public func sendMessage(_ message: ChatCenterUI.THRMessage, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func complete(survey: ChatCenterUI.THRSurvey)
  @objc public func sendFileMessage(_ newMessage: ChatCenterUI.THRMessage, retry: Swift.Bool = false, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func connectClient()
  @objc public func markIncomingMessagesAsRead(_ messages: [ChatCenterUI.THRMessage], completion: (() -> Swift.Void)?)
  @objc public func clearHistory()
  @objc public func cleanCache()
  @objc public func closeChat()
  @objc public func isAvailable() -> Swift.Bool
  @objc public func isSendScheduleAvailable() -> Swift.Bool
  @objc public func viewWillAppear()
  @objc public func sendTyping(withText text: Swift.String)
  @objc public func loadNextHistory(completion: (([ChatCenterUI.THRMessage]) -> Swift.Void)? = nil)
  @objc public func retrySendMessage(_ message: ChatCenterUI.THRMessage)
  @objc public func message(at index: Swift.Int) -> ChatCenterUI.THRMessage?
  @objc public func deleteMessage(_ message: ChatCenterUI.THRMessage)
  @objc public func specialistById(specialist: ChatCenterUI.THRSpecialist) -> ChatCenterUI.THRSpecialist?
  @objc public func checkAndShowQuickReplies()
  @objc public func initializeChat(completion: @escaping ((any Swift.Error)?) -> Swift.Void)
  @objc public func sendClientInfo(preRegistration: Swift.Bool, withCompletion completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func loadServerConfigIfNeeded(completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  @objc public func notifyUnreadCounterChanged(newCount: Swift.Int)
  @objc public func removeFailed(_ message: ChatCenterUI.THRMessage)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PhotoPickerChatStyle : ChatCenterUI.ChatStyle {
  @objc override public init(images _: ChatCenterUI.ChatImages, colors: ChatCenterUI.ChatColors, typography: ChatCenterUI.ChatTypography)
  @objc public var titleStyle: ChatCenterUI.TextChatStyle
  @objc public var maxImagesCount: Swift.UInt8
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class InputChatStyle : ChatCenterUI.ChatStyle {
  @objc public init(text: ChatCenterUI.ChatText? = nil, components: ChatCenterUI.ChatComponents)
  @objc public var hasBorder: Swift.Bool
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc public var borderColor: UIKit.UIColor
  @objc public var text: ChatCenterUI.ChatText
  @objc public var placeholderStyle: ChatCenterUI.PlaceholderChatStyle
  @objc public var minimumHeight: CoreFoundation.CGFloat
  @objc public var maximumHeight: CoreFoundation.CGFloat
  @objc public var cursorColor: UIKit.UIColor
  @objc public var alignment: ChatCenterUI.ChatInputAlignment
  @objc deinit
}
@objc public enum ChatInputAlignment : Swift.Int {
  case top = 2
  case center = 1
  case bottom = 0
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class CCWebSocketDataProvider : ObjectiveC.NSObject {
  @objc deinit
  final public func closeWebSocket()
}
@objc @objcMembers public class ChatFlows : ObjectiveC.NSObject {
  @objc public init(components: ChatCenterUI.ChatComponents = .init(), chatFlow: ChatCenterUI.ChatFlow? = nil, searchFlow: ChatCenterUI.SearchFlow? = nil)
  @objc public var components: ChatCenterUI.ChatComponents {
    get
  }
  @objc public var chatFlow: ChatCenterUI.ChatFlow {
    get
  }
  @objc public var searchFlow: ChatCenterUI.SearchFlow {
    get
  }
  @objc deinit
}
extension ChatCenterUI.CCChatModel {
  @objc dynamic public func messageWith(uuid: Swift.String) -> ChatCenterUI.THRMessage?
  @objc dynamic public func messageWith(correlationId: Swift.String) -> ChatCenterUI.THRMessage?
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class QuickReply : ObjectiveC.NSObject {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc final public let text: Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class OperatorJoinedMessageStyle : ChatCenterUI.MessageStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc public var title: ChatCenterUI.TextChatStyle
  @objc public var subtitle: ChatCenterUI.TextChatStyle
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class ChatStyle : ObjectiveC.NSObject {
  @objc public init(components: ChatCenterUI.ChatComponents)
  @objc public init(images: ChatCenterUI.ChatImages, colors: ChatCenterUI.ChatColors, typography: ChatCenterUI.ChatTypography)
  @objc public var components: ChatCenterUI.ChatComponents?
  @objc final public let images: ChatCenterUI.ChatImages
  @objc final public let colors: ChatCenterUI.ChatColors
  @objc final public let typography: ChatCenterUI.ChatTypography
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var tintColor: UIKit.UIColor
  @objc deinit
}
@objc public protocol THRJSQAudioMediaData : ChatCenterUI.THRJSQMessageMediaData {
  @objc var audioData: Foundation.Data? { get set }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ErrorPlaceholderChatStyle : ChatCenterUI.ChatStyle {
  @objc override public init(images: ChatCenterUI.ChatImages, colors: ChatCenterUI.ChatColors, typography: ChatCenterUI.ChatTypography)
  @objc public var title: ChatCenterUI.ChatText
  @objc public var subtitle: ChatCenterUI.ChatText
  @objc public var errorImage: ChatCenterUI.ChatImage
  @objc public var serverError: ChatCenterUI.ChatImage
  @objc public var repeatButtonStyle: ChatCenterUI.TextButtonChatStyle
  @objc deinit
}
public typealias Completion<T> = (T?, (any Swift.Error)?) -> Swift.Void
public typealias MessagesReadCompletion = ChatCenterUI.Completion<[ChatCenterUI.THRMessage]>
@_hasMissingDesignatedInitializers final public class CCRestDataProvider {
  @objc deinit
  final public let chatConfig: ChatCenterUI.ChatConfig
  final public func closeConnections()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class THRSystemMessageFactory : ObjectiveC.NSObject {
  @objc public static func messageConnectedSpecialist(_ specialist: ChatCenterUI.THRSpecialist?, date: Foundation.Date) -> ChatCenterUI.THRMessage?
  @objc public static func messageDisconnectedSpecialist(_ specialist: ChatCenterUI.THRSpecialist?, date: Foundation.Date) -> ChatCenterUI.THRMessage?
  @objc public static func messageSchedule(_ schedule: ChatCenterUI.THRSchedule) -> ChatCenterUI.THRMessage
  @objc public static func messageRequestCloseThread(hideAfter: Swift.Int) -> ChatCenterUI.THRMessage
  @objc public static func messageSystemText(_ text: Swift.String, date: Foundation.Date, type: ChatCenterUI.THRMessageType) -> ChatCenterUI.THRMessage
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class FileMessageStyle : ChatCenterUI.MessageStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc public var fileSizeLabelStyle: ChatCenterUI.TextChatStyle
  @objc public var fileNameLabelStyle: ChatCenterUI.TextChatStyle
  @objc public var image: ChatCenterUI.ChatImage
  @objc public var text: ChatCenterUI.TextChatStyle
  @objc public var fileIconBackground: UIKit.UIColor
  @objc public var fileIconTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ImageMessageStyle : ChatCenterUI.MessageStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc public var bubbleImage: ChatCenterUI.ChatImage?
  @objc public var bubbleImageStroked: ChatCenterUI.ChatImage?
  @objc public var emptyFillerColor: UIKit.UIColor?
  @objc public var timeAboveImageColor: UIKit.UIColor?
  @objc public var timeAboveImageBackgroundColor: UIKit.UIColor?
  @objc final public let timeBackgroundColor: UIKit.UIColor
  @objc public var time: UIKit.UIColor
  @objc public var imageEdgesActivated: Swift.Bool
  @objc public var imageEdges: UIKit.UIEdgeInsets
  @objc public var imageCornerRadius: CoreFoundation.CGFloat
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SearchBarChatStyle : ChatCenterUI.ChatStyle {
  @objc public init(inputText: ChatCenterUI.InputChatStyle, components: ChatCenterUI.ChatComponents)
  @objc public var searchButtonStyle: ChatCenterUI.IconButtonChatStyle
  @objc public var inputTextStyle: ChatCenterUI.InputChatStyle
  @objc public var cancelButtonStyle: ChatCenterUI.ButtonChatStyle {
    @objc get
    @objc set
  }
  @objc public var clearButtonStyle: ChatCenterUI.ButtonChatStyle?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ProgressViewStyle : ChatCenterUI.ChatStyle {
  @objc public init(progressColor: UIKit.UIColor? = nil)
  @objc public var progressColor: UIKit.UIColor?
  @objc deinit
}
public struct ChatTransportConfig : Swift.CustomDebugStringConvertible {
  public init(rest: Swift.String, webSocket: Swift.String, dataStore: Swift.String, dataStoreHTTPHeaders: [Swift.String : Swift.String]? = nil, newRoutesEnabled: Swift.Bool = true, apiVersion: ChatCenterUI.ChatTransportConfig.APIVersion = .api17)
  public init(cloudHost host: Swift.String, apiVersion: ChatCenterUI.ChatTransportConfig.APIVersion = .api17)
  public enum APIVersion : Swift.UInt {
    case api17
    case api18
    case api19
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  public var newRoutesEnabled: Swift.Bool
  public var apiVersion: ChatCenterUI.ChatTransportConfig.APIVersion
  public var dataStoreHTTPHeaders: [Swift.String : Swift.String]
  public var debugDescription: Swift.String {
    get
  }
}
@objc public enum THRJSQMessageAttachmentState : Swift.Int {
  case none = 0
  case pending
  case ready
  case error
  case expired
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum THRJSQMessageAttachmentErrorType : Swift.Int {
  case none = 0
  case disallowed
  case timeout
  case unexpected
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol THRJSQMediaItemDelegate {
  @objc func dataDidUpdate(_ data: Foundation.Data)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class THRJSQMediaItem : ObjectiveC.NSObject, ChatCenterUI.THRJSQFileMediaData {
  @objc deinit
  @objc weak public var mediaItemDelegate: (any ChatCenterUI.THRJSQMediaItemDelegate)?
  @objc public var state: ChatCenterUI.THRJSQMessageAttachmentState
  @objc public var errorMessage: Swift.String?
  @objc public var errorType: ChatCenterUI.THRJSQMessageAttachmentErrorType
  @objc public var attachmentID: Swift.Int
  @objc public var optional: ChatCenterUI.THRJSQMessageMediaOptional?
  @objc public var sentStatus: Swift.Bool
  @objc public var localGUID: Swift.String
  @objc public var appliesMediaViewMaskAsOutgoing: Swift.Bool
  @objc public var fileData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc public func fileName() -> Swift.String?
  @objc public func mediaDataType() -> Swift.String
  @objc public func toDictionary() -> [Swift.String : Any]
  @objc public func mediaData() -> Any?
  @objc public func mediaView() -> UIKit.UIView?
  @objc public func mediaQuotedView() -> UIKit.UIImageView
  @objc public func mediaViewDisplaySize() -> CoreFoundation.CGSize
  @objc public func mediaHash() -> Swift.UInt
  @objc public func sentSuccessfully(_ success: Swift.Bool)
  @objc public func isInProgressForUI() -> Swift.Bool
  @objc public func failedText() -> Swift.String?
  @objc public func mediaItemInfo() -> Swift.String
  @objc public func mediaViewTitle() -> Swift.String
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LoadingChatStyle : ChatCenterUI.ChatStyle {
  @objc public init(loadingIndicator: ChatCenterUI.LoadingIndicatorChatStyle, components: ChatCenterUI.ChatComponents)
  @objc public var loadingIndicatorStyle: ChatCenterUI.LoadingIndicatorChatStyle
  @objc public var minSize: CoreFoundation.CGSize
  @objc public var text: ChatCenterUI.ChatText
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class CCLoadingLabel : UIKit.UILabel {
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func setText(_ text: Swift.String, animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func stopAnimatation()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class THRButton : ObjectiveC.NSObject {
  @objc public var text: Swift.String?
  @objc public var value: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class THRSurvey : ChatCenterUI.THRJSQMediaItem {
  @objc convenience public init(json: [Swift.String : Any])
  @objc public init(identifier: Swift.Int = 0, sendingId: Swift.Int = 0, questions: [ChatCenterUI.THRSurveyQuestion]? = [], hideAfter: Swift.Int = 0)
  @objc convenience public init(fromAnswer json: [Swift.String : Any])
  @objc @available(*, unavailable)
  required public init?(coder _: Foundation.NSCoder)
  @objc public var identifier: Swift.Int
  @objc public var sendingId: Swift.Int
  @objc public var questions: [ChatCenterUI.THRSurveyQuestion]
  @objc public var hideAfter: Swift.Int
  @objc public var isCloseThreadRequest: Swift.Bool
  @objc public var uuid: Swift.String?
  @objc public var childUUIDs: [Swift.String]
  @objc public var blockInput: Swift.Bool
  @objc public var vote: Foundation.NSNumber {
    @objc get
  }
  @objc public var completed: Swift.Bool {
    @objc get
  }
  @objc public var question: ChatCenterUI.THRSurveyQuestion? {
    @objc get
  }
  @objc public var onlyButtonQuestions: Swift.Bool {
    @objc get
  }
  @objc override public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class THRSurveyQuestion : ObjectiveC.NSObject {
  @objc convenience public init?(json: [Swift.String : Any])
  @objc public var identifier: Swift.Int
  @objc public var text: Swift.String?
  @objc public var positiveAnswer: Swift.String?
  @objc public var negativeAnswer: Swift.String?
  @objc public var scale: Swift.Int
  @objc public var simple: Swift.Bool
  @objc public var rate: Foundation.NSNumber?
  @objc public var isCloseThreadRequest: Swift.Bool
  @objc public var completed: Swift.Bool
  @objc public var buttons: [ChatCenterUI.THRButton]?
  @objc public var buttonQuestion: Swift.Bool {
    @objc get
  }
  @objc public static func question(json: [Swift.String : Any]) -> ChatCenterUI.THRSurveyQuestion?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol THRJSQPhotoMediaData : ChatCenterUI.THRJSQMessageMediaData {
  @objc var isImageDownloadFailed: Swift.Bool { get set }
  @objc var image: UIKit.UIImage? { get set }
}
public typealias CCOGProviderCompletion = (LinkPresentation.LPLinkMetadata?, (any Swift.Error)?) -> Swift.Void
@_hasMissingDesignatedInitializers public class CCOGDataProvider {
  public func fetchOGData(URL url: Foundation.URL, completion: @escaping ChatCenterUI.CCOGProviderCompletion)
  public func cancelFetchOGData(URL urlString: Swift.String)
  @objc deinit
}
extension Foundation.NSURL {
  @objc public static func first(from input: Swift.String) -> Foundation.URL?
  public func mimeType() -> Swift.String
}
@objc public protocol THRJSQMessageMediaData : ObjectiveC.NSObjectProtocol {
  @objc var sentStatus: Swift.Bool { get set }
  @objc func mediaViewTitle() -> Swift.String
  @objc func mediaItemInfo() -> Swift.String
  @objc func sentSuccessfully(_ success: Swift.Bool)
  @objc func mediaView() -> UIKit.UIView?
  @objc func mediaQuotedView() -> UIKit.UIImageView
  @objc func mediaViewDisplaySize() -> CoreFoundation.CGSize
  @objc func mediaHash() -> Swift.UInt
  @objc func mediaDataType() -> Swift.String
  @objc func toDictionary() -> [Swift.String : Any]
  @objc func mediaData() -> Any?
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class TextChatStyle : ChatCenterUI.ChatStyle {
  @objc public init(font: UIKit.UIFont, color: UIKit.UIColor, backgroundColor: UIKit.UIColor = .clear)
  @objc public var font: UIKit.UIFont
  @objc public var color: UIKit.UIColor
  @objc deinit
}
extension Swift.String {
  public func md5() -> Swift.String
  public func urlEncoded() -> Swift.String?
}
extension ChatCenterUI.CCWebSocketDataProvider : Foundation.URLSessionWebSocketDelegate {
  @objc final public func urlSession(_: Foundation.URLSession, webSocketTask _: Foundation.URLSessionWebSocketTask, didOpenWithProtocol _: Swift.String?)
  @objc final public func urlSession(_: Foundation.URLSession, webSocketTask _: Foundation.URLSessionWebSocketTask, didCloseWith code: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
  @objc final public func urlSession(_: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc final public func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc final public func urlSession(_: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting _: Foundation.URLSessionTaskMetrics)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ScheduleMessageStyle : ChatCenterUI.MessageStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc public var image: ChatCenterUI.ChatImage
  @objc public var text: ChatCenterUI.TextChatStyle
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class THRSchedule : ChatCenterUI.THRJSQMediaItem {
  @objc public init?(configJSON: [Swift.String : Any]?)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc weak public var chat: ChatCenterUI.CCChatModel?
  @objc public var titleMessage: Swift.String?
  @objc public var sendDuringInactive: Swift.Bool
  @objc public var serverTime: Foundation.Date?
  @objc override public func fileName() -> Swift.String?
  @objc override public func mediaDataType() -> Swift.String
  @objc override public func toDictionary() -> [Swift.String : Any]
  @objc override public func mediaData() -> Any?
  @objc override public func mediaView() -> UIKit.UIView?
  @objc override public func mediaViewDisplaySize() -> CoreFoundation.CGSize
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc public func isAvailableNow() -> Swift.Bool
  @objc public func getIntervalToNextAvailabilityChange() -> Swift.Int
  @objc deinit
}
@objc extension Foundation.NSPredicate {
  @objc dynamic public class func unreadMessages() -> Foundation.NSPredicate
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class THRJSQFileMediaItem : ChatCenterUI.THRJSQMediaItem, Foundation.NSSecureCoding {
  @objc public init(files: [ChatCenterUI.THRJSQFile]? = nil, maskImage: UIKit.UIImage?)
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public static var supportsSecureCoding: Swift.Bool
  @objc override public var appliesMediaViewMaskAsOutgoing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override public var fileData: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc public var downloading: Swift.Bool
  @objc public var files: [ChatCenterUI.THRJSQFile]?
  @objc public var fileUrl: Foundation.URL?
  @objc public var mediaURL: Foundation.URL?
  @objc override public func mediaViewDisplaySize() -> CoreFoundation.CGSize
  @objc override public func mediaQuotedView() -> UIKit.UIImageView
  @objc override public func mediaHash() -> Swift.UInt
  @objc override public func mediaDataType() -> Swift.String
  @objc override public func mediaData() -> Any?
  @objc override public func toDictionary() -> [Swift.String : Any]
  @objc override public func fileName() -> Swift.String?
  @objc override public func failedText() -> Swift.String?
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc public func startDownloading()
  @objc public func stopDownloading()
  @objc public func isFileExist() -> Swift.Bool
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func fillToSuperview()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func anchor(top: UIKit.NSLayoutYAxisAnchor? = nil, left: UIKit.NSLayoutXAxisAnchor? = nil, bottom: UIKit.NSLayoutYAxisAnchor? = nil, right: UIKit.NSLayoutXAxisAnchor? = nil, topConstant: CoreFoundation.CGFloat = 0, leftConstant: CoreFoundation.CGFloat = 0, bottomConstant: CoreFoundation.CGFloat = 0, rightConstant: CoreFoundation.CGFloat = 0, widthConstant: CoreFoundation.CGFloat = 0, heightConstant: CoreFoundation.CGFloat = 0) -> [UIKit.NSLayoutConstraint]
  @_Concurrency.MainActor @preconcurrency public func anchorCenterXToSuperview(constant: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor @preconcurrency public func anchorCenterYToSuperview(constant: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor @preconcurrency public func anchorCenterSuperview()
  @_Concurrency.MainActor @preconcurrency public func thrjsqImage() -> UIKit.UIImage?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addContainedView(_ inSubView: UIKit.UIView)
}
@objc public protocol CCRestDataProviderDelegate : ObjectiveC.NSObjectProtocol {
  @objc func restImageLoaded(_ item: ChatCenterUI.THRJSQPhotoMediaItem)
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class CCDataProvider : ObjectiveC.NSObject {
  final public var ogDataProvider: ChatCenterUI.CCOGDataProvider
  @objc weak final public var delegate: (any ChatCenterUI.CCRestDataProviderDelegate)?
  @objc final public func cleanCache()
  @objc final public func fetchOGData(URL url: Foundation.URL, completion: @escaping ChatCenterUI.CCOGProviderCompletion)
  @objc deinit
}
@objc public enum ChatAlignment : Swift.UInt {
  case center
  case left
  case right
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class QuickReplyStyle : ChatCenterUI.ChatStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc public enum QuickReplyMode : Swift.Int {
    case toolbar
    case embed
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var mode: ChatCenterUI.QuickReplyStyle.QuickReplyMode
  @objc public var alignment: ChatCenterUI.ChatAlignment
  @objc public var font: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc final public let insets: UIKit.UIEdgeInsets
  @objc public var color: ChatCenterUI.ChatButtonColor {
    @objc get
    @objc set
  }
  @objc public var textColor: ChatCenterUI.ChatButtonColor {
    @objc get
    @objc set
  }
  @objc public var borderColor: ChatCenterUI.ChatButtonColor {
    @objc get
    @objc set
  }
  @objc public var buttonHeight: CoreFoundation.CGFloat
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class ChatPlaceholderView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public func activateConstraints(size: CoreFoundation.CGSize, verticalOffset _: CoreFoundation.CGFloat)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class TextMessageStyle : ChatCenterUI.MessageStyle {
  @objc public var textStyle: ChatCenterUI.TextChatStyle
  @objc public var textViewFrameInsets: UIKit.UIEdgeInsets
  @objc public var textViewTextContainerInsets: UIKit.UIEdgeInsets
  @objc public var messageBubbleOppositeMargin: CoreFoundation.CGFloat
  @objc deinit
}
extension Foundation.URLRequest {
  public enum HTTPMethod : Swift.String {
    case GET
    case PUT
    case POST
    case DELETE
    case HEAD
    case OPTIONS
    case TRACE
    case CONNECT
    public init?(rawValue: Swift.String)
    @available(iOS 8.0, tvOS 9.0, watchOS 2.0, macOS 10.10, *)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var method: Foundation.URLRequest.HTTPMethod? {
    get
    set
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LoadingIndicatorChatStyle : ChatCenterUI.ChatStyle {
  @objc override public init(components: ChatCenterUI.ChatComponents)
  @objc final public let loaderColor: UIKit.UIColor
  @objc deinit
}
public struct ChatAuth {
  public init(token: Swift.String? = nil, scheme: Swift.String? = nil, method: ChatCenterUI.ChatAuthMethod = .headers, signature: Swift.String? = nil, isEncrypted: Swift.Bool = false)
}
public enum ChatAuthMethod {
  case headers
  case cookies
  public static func == (a: ChatCenterUI.ChatAuthMethod, b: ChatCenterUI.ChatAuthMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class PushUserInfo : ObjectiveC.NSObject {
  @objc public init?(from pushUserInfo: [Swift.String : Any])
  @objc final public let alert: Swift.String
  @objc final public let skillId: Swift.Int
  @objc final public let expiredAt: Swift.String
  @objc final public let chlSentAt: Swift.String
  @objc final public let campaign: Swift.String
  @objc final public let priority: Swift.Int
  @objc final public let senderName: Swift.String
  @objc final public let chatMessageId: Swift.String?
  @objc public class func checkMinimumPush(from pushUserInfo: [Swift.String : Any]) -> Swift.Bool
  @objc deinit
}
public struct ChatLoggerConfig {
  public init(logLevel: ChatCenterUI.ChatLogLevel = .off, logFileSize: Swift.Int = 2, logFilesCount: Swift.Int = 10)
}
public struct ChatLogLevel : Swift.OptionSet {
  public init(rawValue: Swift.Int)
  public static let off: ChatCenterUI.ChatLogLevel
  public static let info: ChatCenterUI.ChatLogLevel
  public static let rest: ChatCenterUI.ChatLogLevel
  public static let webSocket: ChatCenterUI.ChatLogLevel
  public static let userInterface: ChatCenterUI.ChatLogLevel
  public static let error: ChatCenterUI.ChatLogLevel
  public static let network: ChatCenterUI.ChatLogLevel
  public static let all: ChatCenterUI.ChatLogLevel
  public let rawValue: Swift.Int
  public typealias ArrayLiteralElement = ChatCenterUI.ChatLogLevel
  public typealias Element = ChatCenterUI.ChatLogLevel
  public typealias RawValue = Swift.Int
}
@objc public protocol StarRateViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc func valueDidChange(sender: ChatCenterUI.StarRateView)
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class StarRateView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(minimumValue: Swift.UInt, maximumValue: Swift.UInt)
  @objc @_Concurrency.MainActor @preconcurrency public init(minimumValue: Swift.UInt, maximumValue: Swift.UInt, value: Swift.UInt, spacing: CoreFoundation.CGFloat, emptyStarImage: UIKit.UIImage?, emptyStarColor: UIKit.UIColor, filledStarImage: UIKit.UIImage?, fullStarColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency weak public var delegate: (any ChatCenterUI.StarRateViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var maximumValue: Swift.UInt
  @objc @_Concurrency.MainActor @preconcurrency public var minimumValue: Swift.UInt
  @objc @_Concurrency.MainActor @preconcurrency public var spacing: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency public var emptyStarImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor @preconcurrency public var emptyStarColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency public var filledStarImage: UIKit.UIImage?
  @objc @_Concurrency.MainActor @preconcurrency public var fullStarColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency public var value: Swift.UInt {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class FileViewerChatStyle : ChatCenterUI.ChatStyle {
  @objc override public init(images _: ChatCenterUI.ChatImages, colors: ChatCenterUI.ChatColors, typography: ChatCenterUI.ChatTypography)
  @objc public var titleStyle: ChatCenterUI.TextChatStyle?
  @objc public var navBarBackgroundColor: UIKit.UIColor
  @objc public var navBarTintColor: UIKit.UIColor?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ScrollToUnreadMessageButtonStyle : ChatCenterUI.ChatStyle {
  @objc public init(components: ChatCenterUI.ChatComponents, image: ChatCenterUI.ChatImage)
  @objc public var badgeStyle: ChatCenterUI.TextChatStyle
  @objc public var image: ChatCenterUI.ChatImage
  @objc deinit
}
@objc public enum THRAlertAction : Swift.UInt {
  case retry
  case delete
  case cancel
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class THRAlertFactory : ObjectiveC.NSObject {
  @objc public static func buildToastView(title: Swift.String, icon: UIKit.UIImage?, position: ChatCenterUI.Position) -> ChatCenterUI.ToastView
  @objc public static func buildInfoAlert(title: Swift.String?, message: Swift.String?) -> UIKit.UIAlertController
  @objc public static func buildInfoAlert(title: Swift.String?, message: Swift.String?, handler: ((UIKit.UIAlertAction) -> Swift.Void)?) -> UIKit.UIAlertController
  @objc public static func buildAlert(title: Swift.String?, message: Swift.String?, actionTitle: Swift.String, handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil) -> UIKit.UIAlertController
  @objc public static func buildCancellableAlert(title: Swift.String?, message: Swift.String?, cancelTitle: Swift.String?, actionTitle: Swift.String, handler: ((UIKit.UIAlertAction) -> Swift.Void)?) -> UIKit.UIAlertController
  @objc public static func failedMessageAlert(withIsSendAvailable isSendAvailable: Swift.Bool, message: Swift.String?, handler: ((ChatCenterUI.THRAlertAction) -> Swift.Void)?) -> UIKit.UIAlertController
  @objc public static func failedMessageAlert(handler: ((ChatCenterUI.THRAlertAction) -> Swift.Void)?) -> UIKit.UIAlertController
  @objc override dynamic public init()
  @objc deinit
}
final public class ChatCenterUISDK {
  public init(providerUid: Swift.String, appMarker: Swift.String? = nil, chatConfig: ChatCenterUI.ChatConfig, loggerConfig: ChatCenterUI.ChatLoggerConfig? = nil)
  @objc deinit
  public static let version: Swift.String
  final public var localizationConfig: ChatCenterUI.ChatLocalizationConfig?
  weak final public var delegate: (any ChatCenterUI.ChatCenterUISDKDelegate)? {
    get
    set
  }
  final public var unreadMessagesCount: Swift.Int {
    get
  }
  final public var theme: ChatCenterUI.ChatTheme {
    get
    set
  }
  final public var darkTheme: ChatCenterUI.ChatTheme {
    get
    set
  }
  public static func isChatCenterNotification(_ userInfo: [Swift.String : Any]) -> Swift.Bool
  public static func setDeviceToken(_ deviceToken: Foundation.Data)
  final public func authorize(user: ChatCenterUI.ChatUser, auth: ChatCenterUI.ChatAuth = ChatAuth())
  final public func deauthorizeUser()
  #if compiler(>=5.3) && $TypedThrows
  final public func logout() throws(ChatCenterUI.ChatCenterUIError)
  #endif
  #if compiler(>=5.3) && $TypedThrows
  final public func getChat(userInfo: [Swift.String : Any]? = nil) throws(ChatCenterUI.ChatCenterUIError) -> UIKit.UIViewController
  #endif
  #if compiler(>=5.3) && $TypedThrows
  final public func send(message: ChatCenterUI.ChatMessage) throws(ChatCenterUI.ChatCenterUISendMessageError)
  #endif
  #if compiler(>=5.3) && $TypedThrows
  final public func handleNotification(userInfo: [Swift.String : Any]) throws(ChatCenterUI.ChatCenterUIError)
  #endif
}
public enum ChatCenterUISendMessageError : Swift.Error {
  case userNotAuthorized
  case webSocketNotActive
  case chatNotOpened
  case messageNotSent
  case messageIsEmpty
  case messageTooLong
  case messageImageTooLarge
  case messageImageCompressionError
  public static func == (a: ChatCenterUI.ChatCenterUISendMessageError, b: ChatCenterUI.ChatCenterUISendMessageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChatCenterUIError : Swift.Error {
  case userNotAuthorized
  case chatNotOpened
  public static func == (a: ChatCenterUI.ChatCenterUIError, b: ChatCenterUI.ChatCenterUIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc extension Foundation.FileManager {
  @objc dynamic public func saveData(data: Foundation.Data, toCacheFile name: Swift.String) -> Foundation.URL?
  @objc dynamic public func getURL(forCachedFile name: Swift.String) -> Foundation.URL?
  @objc dynamic public func getData(forCachedFile name: Swift.String) -> Foundation.Data?
  @objc dynamic public func saveToTemporaryDirectory(image: UIKit.UIImage) -> Foundation.URL?
  @objc dynamic public func getFromTemporaryDirectory(for url: Foundation.URL) -> Foundation.Data?
  @objc dynamic public func cleanCache()
  @objc dynamic public var temporaryImagesCache: Foundation.URL? {
    @objc get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ButtonChatStyle : ChatCenterUI.ChatStyle {
  @objc public init(color: ChatCenterUI.ChatButtonColor?, cornerRadius: CoreFoundation.CGFloat = 0.0)
  @objc public var text: ChatCenterUI.TextChatStyle
  @objc public var color: ChatCenterUI.ChatButtonColor?
  @objc deinit
}
extension ChatCenterUI.CCState : Swift.Equatable {}
extension ChatCenterUI.CCState : Swift.Hashable {}
extension ChatCenterUI.CCState : Swift.RawRepresentable {}
extension ChatCenterUI.SearchScope : Swift.Equatable {}
extension ChatCenterUI.SearchScope : Swift.Hashable {}
extension ChatCenterUI.SearchScope : Swift.RawRepresentable {}
extension ChatCenterUI.SearchState : Swift.Equatable {}
extension ChatCenterUI.SearchState : Swift.Hashable {}
extension ChatCenterUI.SearchState : Swift.RawRepresentable {}
extension ChatCenterUI.THRMessageStatus : Swift.Equatable {}
extension ChatCenterUI.THRMessageStatus : Swift.Hashable {}
extension ChatCenterUI.THRMessageStatus : Swift.RawRepresentable {}
extension ChatCenterUI.THRMessageModified : Swift.Equatable {}
extension ChatCenterUI.THRMessageModified : Swift.Hashable {}
extension ChatCenterUI.THRMessageModified : Swift.RawRepresentable {}
extension ChatCenterUI.THRMessageType : Swift.Equatable {}
extension ChatCenterUI.THRMessageType : Swift.Hashable {}
extension ChatCenterUI.THRMessageType : Swift.RawRepresentable {}
extension ChatCenterUI.THRParticipantSex : Swift.Equatable {}
extension ChatCenterUI.THRParticipantSex : Swift.Hashable {}
extension ChatCenterUI.THRParticipantSex : Swift.RawRepresentable {}
extension ChatCenterUI.THRJSQAudioMediaStatus : Swift.Equatable {}
extension ChatCenterUI.THRJSQAudioMediaStatus : Swift.Hashable {}
extension ChatCenterUI.THRJSQAudioMediaStatus : Swift.RawRepresentable {}
extension ChatCenterUI.SurveyMessageType : Swift.Equatable {}
extension ChatCenterUI.SurveyMessageType : Swift.Hashable {}
extension ChatCenterUI.SurveyMessageType : Swift.RawRepresentable {}
extension ChatCenterUI.Position : Swift.Equatable {}
extension ChatCenterUI.Position : Swift.Hashable {}
extension ChatCenterUI.Position : Swift.RawRepresentable {}
extension ChatCenterUI.CCChatModelConfigState : Swift.Equatable {}
extension ChatCenterUI.CCChatModelConfigState : Swift.Hashable {}
extension ChatCenterUI.CCChatModelConfigState : Swift.RawRepresentable {}
extension ChatCenterUI.ChatInputAlignment : Swift.Equatable {}
extension ChatCenterUI.ChatInputAlignment : Swift.Hashable {}
extension ChatCenterUI.ChatInputAlignment : Swift.RawRepresentable {}
extension ChatCenterUI.ChatTransportConfig.APIVersion : Swift.Equatable {}
extension ChatCenterUI.ChatTransportConfig.APIVersion : Swift.Hashable {}
extension ChatCenterUI.ChatTransportConfig.APIVersion : Swift.RawRepresentable {}
extension ChatCenterUI.THRJSQMessageAttachmentState : Swift.Equatable {}
extension ChatCenterUI.THRJSQMessageAttachmentState : Swift.Hashable {}
extension ChatCenterUI.THRJSQMessageAttachmentState : Swift.RawRepresentable {}
extension ChatCenterUI.THRJSQMessageAttachmentErrorType : Swift.Equatable {}
extension ChatCenterUI.THRJSQMessageAttachmentErrorType : Swift.Hashable {}
extension ChatCenterUI.THRJSQMessageAttachmentErrorType : Swift.RawRepresentable {}
extension ChatCenterUI.ChatAlignment : Swift.Equatable {}
extension ChatCenterUI.ChatAlignment : Swift.Hashable {}
extension ChatCenterUI.ChatAlignment : Swift.RawRepresentable {}
extension ChatCenterUI.QuickReplyStyle.QuickReplyMode : Swift.Equatable {}
extension ChatCenterUI.QuickReplyStyle.QuickReplyMode : Swift.Hashable {}
extension ChatCenterUI.QuickReplyStyle.QuickReplyMode : Swift.RawRepresentable {}
extension Foundation.URLRequest.HTTPMethod : Swift.Equatable {}
extension Foundation.URLRequest.HTTPMethod : Swift.Hashable {}
extension Foundation.URLRequest.HTTPMethod : Swift.RawRepresentable {}
extension ChatCenterUI.ChatAuthMethod : Swift.Equatable {}
extension ChatCenterUI.ChatAuthMethod : Swift.Hashable {}
extension ChatCenterUI.THRAlertAction : Swift.Equatable {}
extension ChatCenterUI.THRAlertAction : Swift.Hashable {}
extension ChatCenterUI.THRAlertAction : Swift.RawRepresentable {}
extension ChatCenterUI.ChatCenterUISendMessageError : Swift.Equatable {}
extension ChatCenterUI.ChatCenterUISendMessageError : Swift.Hashable {}
extension ChatCenterUI.ChatCenterUIError : Swift.Equatable {}
extension ChatCenterUI.ChatCenterUIError : Swift.Hashable {}
